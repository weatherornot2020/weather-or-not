{"version":3,"sources":["util/kToF.js","Weather/WeatherDisplay.js","Weather/WeatherForm.js","Weather/Weather.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["kToF","tempInKelvin","pad","num","slice","getTimeFromDate","timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","WeatherDisplay","props","weatherData","weather","weatherInfo","JSON","stringify","name","src","icon","alt","className","description","main","temp","feels_like","temp_max","temp_min","style","display","marginTop","wind","speed","deg","sys","sunrise","sunset","WeatherForm","useState","zip","setZip","error","setError","htmlFor","type","id","placeholder","onChange","event","isNaN","target","value","onClick","fetch","process","then","res","a","json","data","console","log","setWeatherData","catch","e","color","Weather","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.1a8566b1.chunk.js","sourcesContent":["export const kToF = (tempInKelvin) => {\n  return 1.8 * (tempInKelvin - 273.15) + 32;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Wind,\n  Sunset,\n  Sunrise,\n  Thermometer,\n  ArrowDownCircle,\n  ArrowUpCircle,\n  Smile,\n} from \"react-feather\";\nimport FadeIn from \"react-fade-in\";\nimport { kToF } from \"../util/kToF\";\n\nfunction pad(num) {\n  return (\"0\" + num).slice(-2);\n}\nfunction getTimeFromDate(timestamp) {\n  var date = new Date(timestamp * 1000);\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  const ampm = hours >= 12 ? \"PM\" : \"AM\";\n  if (hours > 12) hours = hours - 12;\n  return pad(hours) + \":\" + pad(minutes) + \":\" + pad(seconds) + ampm;\n}\n\nexport const WeatherDisplay = (props) => {\n  if (\n    props.weatherData &&\n    props.weatherData.weather &&\n    props.weatherData.weather[0]\n  ) {\n    const weatherInfo = props.weatherData.weather[0];\n    return (\n      <FadeIn>\n        <div>\n          temporary for testing: {JSON.stringify(props.weatherData, null, 2)}\n        </div>\n        <h2>{props.weatherData.name}</h2>\n        <img\n          src={`http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`}\n          alt=\"weather icon\"\n        />\n        <span className={\"weather-desc\"}>{weatherInfo.description}</span>\n        <br />\n        <div>\n          <Thermometer />\n          {kToF(props.weatherData.main.temp)}&deg;F\n          <br />\n          <Smile /> Feels like {kToF(props.weatherData.main.feels_like)}&deg;F\n          <br />\n          <ArrowUpCircle /> {kToF(props.weatherData.main.temp_max)}&deg;F |{\" \"}\n          <ArrowDownCircle /> {kToF(props.weatherData.main.temp_min)}&deg;F\n        </div>\n        <div>\n          <Wind />\n          <div style={{ display: \"inline\", marginTop: \"-5\" }}>\n            {props.weatherData.wind.speed}mph at {props.weatherData.wind.deg}\n            &deg;\n          </div>\n        </div>\n        <div>\n          <Sunrise /> {getTimeFromDate(props.weatherData.sys.sunrise)}\n        </div>\n        <div>\n          <Sunset /> {getTimeFromDate(props.weatherData.sys.sunset)}\n        </div>\n      </FadeIn>\n    );\n  } else {\n    return null;\n  }\n};\n\nWeatherDisplay.propTypes = {\n  weatherData: PropTypes.object,\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const WeatherForm = (props) => {\n  const [zip, setZip] = useState();\n  const [error, setError] = useState();\n\n  const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\n  //TODO: make this user-selectable\n  const countryCode = \"us\";\n\n  const fetchWeatherData = () => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?zip=${zip},${countryCode}&appid=${apiKey}`\n    )\n      .then(async (res) => {\n        const data = await res.json();\n        console.log(data);\n        props.setWeatherData(data);\n      })\n      .catch((e) => console.log(e));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"zipcode\">\n        Zip Code:\n        <br />\n        <input\n          type=\"text\"\n          id=\"zipcode\"\n          name=\"zipcode\"\n          placeholder=\"enter weather data\"\n          onChange={(event) => {\n            if (!isNaN(event.target.value)) {\n              setError(null);\n              setZip(event.target.value);\n            } else {\n              setZip(null);\n              setError(\"Please enter a valid number\");\n            }\n          }}\n        />\n      </label>\n      <br />\n      <button onClick={fetchWeatherData}>Find Weather Data</button>\n      <br />\n      <span style={{ color: \"red\" }}>{error}</span>\n    </>\n  );\n};\n\nWeatherForm.propTypes = {\n  setWeatherData: PropTypes.func.isRequired,\n};\n","import React, { useState } from \"react\";\nimport { WeatherDisplay } from \"./WeatherDisplay\";\nimport { WeatherForm } from \"./WeatherForm\";\n\nexport const Weather = () => {\n  const [weatherData, setWeatherData] = useState();\n\n  return (\n    <main>\n      <WeatherForm setWeatherData={setWeatherData} />\n      <WeatherDisplay weatherData={weatherData} />\n    </main>\n  );\n};\n","import React from \"react\";\r\nimport logo from \"./logo.png\";\r\nimport \"./App.css\";\r\nimport { Weather } from \"./Weather/Weather\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1>Welcome to Weather or Not!</h1>\r\n      </header>\r\n      <body className=\"App-body\">\r\n        <Weather className=\"App-weather\" />\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.0e9eb034.png\";"],"sourceRoot":""}
{"version":3,"sources":["util/index.js","Weather/CurrentWeatherDisplay.js","Weather/WeatherForm.js","Weather/FutureHour.js","Weather/Weather.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["pad","num","slice","getTimeFromDate","timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","months","CurrentWeatherDisplay","props","weatherData","weather","weatherInfo","name","src","icon","alt","className","description","main","temp","feels_like","temp_max","temp_min","style","display","marginTop","wind","speed","deg","sys","sunrise","sunset","WeatherForm","useState","zip","setZip","error","setError","apiKey","process","htmlFor","type","id","placeholder","onChange","event","isNaN","target","value","onClick","fetch","then","res","a","json","data","console","log","setCurrentWeatherData","setForecastData","catch","e","color","FutureHour","monthName","getMonth","dayOfMonth","getDate","day","getDatePostfix","getPrettyDayOfMonth","dt","getPrettyTime","Weather","setWeatherData","forecastData","list","length","map","futureHourWeather","key","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.f99eb67a.chunk.js","sourcesContent":["export const pad = (num) => {\n  return (\"0\" + num).slice(-2);\n};\nexport const getTimeFromDate = (timestamp) => {\n  const date = new Date(timestamp * 1000);\n  let hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  const ampm = hours >= 12 ? \"pm\" : \"am\";\n  if (hours > 12) hours = hours - 12;\n  return pad(hours) + \":\" + pad(minutes) + \":\" + pad(seconds) + ampm;\n};\n\n// generate here because it is constant,\n// we don't need to recreate the array every time we render a date,\n// which could save hundreds of arrays from being created in memory\nconst months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nconst getDatePostfix = function (day) {\n  if (day > 3 && day < 21) return \"th\";\n  switch (day % 10) {\n    case 1:\n      return \"st\";\n    case 2:\n      return \"nd\";\n    case 3:\n      return \"rd\";\n    default:\n      return \"th\";\n  }\n};\n\nexport const getPrettyDayOfMonth = (timestamp) => {\n  const date = new Date(timestamp * 1000);\n  const monthName = months[date.getMonth()];\n  const dayOfMonth = date.getDate();\n  return `${monthName} ${dayOfMonth + getDatePostfix(dayOfMonth)}`;\n};\n\nexport const getPrettyTime = (timestamp) => {\n  const date = new Date(timestamp * 1000);\n  let hours = date.getHours();\n  const ampm = hours >= 12 ? \"pm\" : \"am\";\n  if (hours > 12) hours = hours - 12;\n  return pad(hours) + ampm;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Wind,\n  Sunset,\n  Sunrise,\n  Thermometer,\n  ArrowDownCircle,\n  ArrowUpCircle,\n  Smile,\n} from \"react-feather\";\nimport FadeIn from \"react-fade-in\";\nimport { getTimeFromDate } from \"../util\";\n\nexport const CurrentWeatherDisplay = (props) => {\n  if (\n    props.weatherData &&\n    props.weatherData.weather &&\n    props.weatherData.weather[0]\n  ) {\n    const weatherInfo = props.weatherData.weather[0];\n    return (\n      <FadeIn>\n        <h2>{props.weatherData.name}</h2>\n        <img\n          src={`http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`}\n          alt=\"weather icon\"\n        />\n        <span className={\"weather-desc\"}>{weatherInfo.description}</span>\n        <br />\n        <div>\n          <Thermometer />\n          {props.weatherData.main.temp}&deg;F\n          <br />\n          <Smile /> Feels like {props.weatherData.main.feels_like}&deg;F\n          <br />\n          <ArrowUpCircle /> {props.weatherData.main.temp_max}&deg;F |{\" \"}\n          <ArrowDownCircle /> {props.weatherData.main.temp_min}&deg;F\n        </div>\n        <div>\n          <Wind />\n          <div style={{ display: \"inline\", marginTop: \"-5\" }}>\n            {props.weatherData.wind.speed}mph at {props.weatherData.wind.deg}\n            &deg;\n          </div>\n        </div>\n        <div>\n          <Sunrise /> {getTimeFromDate(props.weatherData.sys.sunrise)}\n        </div>\n        <div>\n          <Sunset /> {getTimeFromDate(props.weatherData.sys.sunset)}\n        </div>\n      </FadeIn>\n    );\n  } else {\n    return null;\n  }\n};\n\nCurrentWeatherDisplay.propTypes = {\n  weatherData: PropTypes.object,\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const WeatherForm = (props) => {\n  const [zip, setZip] = useState();\n  const [error, setError] = useState();\n\n  const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\n  //TODO: make this user-selectable\n  const countryCode = \"us\";\n\n  const fetchWeatherData = () => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?zip=${zip},${countryCode}&appid=${apiKey}&units=imperial`\n    )\n      .then(async (res) => {\n        const data = await res.json();\n        console.log(data);\n        props.setCurrentWeatherData(data);\n      })\n      .then(() => {\n        fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?zip=${zip},${countryCode}&appid=${apiKey}&units=imperial`\n        ).then(async (res) => {\n          const data = await res.json();\n          console.log(data);\n          props.setForecastData(data);\n        });\n      })\n      .catch((e) => console.log(e));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"zipcode\">\n        Zip Code:\n        <br />\n        <input\n          type=\"text\"\n          id=\"zipcode\"\n          name=\"zipcode\"\n          placeholder=\"enter weather data\"\n          onChange={(event) => {\n            if (!isNaN(event.target.value)) {\n              setError(null);\n              setZip(event.target.value);\n            } else {\n              setZip(null);\n              setError(\"Please enter a valid number\");\n            }\n          }}\n        />\n      </label>\n      <br />\n      <button onClick={fetchWeatherData}>Find Weather Data</button>\n      <br />\n      <span style={{ color: \"red\" }}>{error}</span>\n    </>\n  );\n};\n\nWeatherForm.propTypes = {\n  setCurrentWeatherData: PropTypes.func.isRequired,\n  setForecastData: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FadeIn from \"react-fade-in\";\nimport { getPrettyDayOfMonth, getPrettyTime } from \"../util\";\n\nexport const FutureHour = (props) => {\n  if (\n    props.weatherData &&\n    props.weatherData.weather &&\n    props.weatherData.weather[0]\n  ) {\n    const weatherInfo = props.weatherData.weather[0];\n    return (\n      <FadeIn className=\"hourly-weather\">\n        <h2>{props.weatherData.name}</h2>\n        <h3>{getPrettyDayOfMonth(props.weatherData.dt)}</h3>\n        <h3>{getPrettyTime(props.weatherData.dt)}</h3>\n        <img\n          src={`http://openweathermap.org/img/wn/${weatherInfo.icon}.png`}\n          alt=\"weather icon\"\n        />\n        <span className={\"weather-desc\"}>{weatherInfo.description}</span>\n        <br />\n        <div>\n          {props.weatherData.main.temp}&deg;F\n          <br />\n          Feels like {props.weatherData.main.feels_like}&deg;F\n          <br />\n          {props.weatherData.main.temp_max}&deg;F |{\" \"}\n          {props.weatherData.main.temp_min}&deg;F\n        </div>\n        <div>\n          <div style={{ display: \"inline\", marginTop: \"-5\" }}>\n            {props.weatherData.wind.speed}mph at {props.weatherData.wind.deg}\n            &deg;\n          </div>\n        </div>\n      </FadeIn>\n    );\n  } else {\n    return null;\n  }\n};\n\nFutureHour.propTypes = {\n  weatherData: PropTypes.object,\n};\n","import React, { useState } from \"react\";\nimport { CurrentWeatherDisplay } from \"./CurrentWeatherDisplay\";\nimport { WeatherForm } from \"./WeatherForm\";\nimport { FutureHour } from \"./FutureHour\";\n\nexport const Weather = () => {\n  const [weatherData, setWeatherData] = useState();\n  const [forecastData, setForecastData] = useState();\n\n  return (\n    <main>\n      <section className={\"weather-form\"}>\n        <WeatherForm\n          setCurrentWeatherData={setWeatherData}\n          setForecastData={setForecastData}\n        />\n      </section>\n      <section className={\"current-weather-data\"}>\n        <CurrentWeatherDisplay weatherData={weatherData} />\n      </section>\n      <section className={\"hourly-weather-container\"}>\n        {forecastData &&\n          forecastData.list &&\n          forecastData.list.length > 0 &&\n          forecastData.list.map((futureHourWeather) => (\n            <FutureHour\n              key={futureHourWeather.dt}\n              weatherData={futureHourWeather}\n            />\n          ))}\n      </section>\n    </main>\n  );\n};\n","import React from \"react\";\r\nimport logo from \"./logo.png\";\r\nimport \"./App.css\";\r\nimport { Weather } from \"./Weather/Weather\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1>Welcome to Weather or Not!</h1>\r\n      </header>\r\n      <body className=\"App-body\">\r\n        <Weather className=\"App-weather\" />\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.0e9eb034.png\";"],"sourceRoot":""}